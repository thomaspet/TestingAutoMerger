import {Component, ComponentRef, Input, Output, ViewChild, SimpleChange, EventEmitter} from '@angular/core';
import {Router, RouteParams, RouterLink} from '@angular/router-deprecated';
import {Observable} from 'rxjs/Observable';
import 'rxjs/add/observable/forkJoin';

import {ProductService, AccountService, VatTypeService} from '../../../../services/services';

import {FieldType, FieldLayout, ComponentLayout, Product, Account, VatType} from '../../../../unientities';
import {UniSave, IUniSaveAction} from '../../../../../framework/save/save';
import {UniForm, UniField, UniFieldLayout} from '../../../../../framework/uniform';
import {TabService} from "../../../layout/navbar/tabstrip/tabService";

declare var _; // lodash

@Component({
    selector: 'product-details',
    templateUrl: 'app/components/common/product/details/productDetails.html',    
    directives: [UniForm, UniSave],
    providers: [ProductService, AccountService, VatTypeService]
})
export class ProductDetails {            
    @Input() public productId: any;
    @ViewChild(UniForm) private form: UniForm;
    
    private config: any = {};
    private fields: any[] = [];
    private product: Product;
    
    private accounts: Account[];
    private vatTypes: VatType[];
   
    private productTypes: any[] = [
        {ID: 1, TypeName: 'Lagervare'},
        {ID: 2, TypeName: 'Timeprodukt'},
        {ID: 3, TypeName: 'Annet'}
    ]; 
   
    private priceExVat: UniField;
    private priceIncVat: UniField;
    private vatTypeField: UniField;
    private calculateGrossPriceBasedOnNetPriceField: UniField;
           
    constructor(private productService: ProductService, private accountService: AccountService, private vatTypeService: VatTypeService, private router: Router, private params: RouteParams, private tabService: TabService) {                
        this.productId = params.get('id');        
    }
    
    private isActive(instruction: any[]): boolean {
        return this.router.isRouteActive(this.router.generate(instruction));
    }
          
    private saveactions: IUniSaveAction[] = [
         {
             label: 'Lagre',
             action: (completeEvent) => this.saveProduct(completeEvent),
             main: true,
             disabled: false
         }
    ];
          
    public ngOnInit() {
        
        this.fields = this.getComponentLayout().Fields;     
        
        var subject = null;
        
        // run extra API-call for new entities to get autogenerated suggestion for partname
        if (this.productId > 0) {
            subject = Observable.forkJoin(            
                this.productService.Get(this.productId),
                this.accountService.GetAll(null),
                this.vatTypeService.GetAll(null));
        } else {
            subject = Observable.forkJoin(
                this.productService.GetNewEntity(),
                this.accountService.GetAll(null),
                this.vatTypeService.GetAll(null),                  
                this.productService.getNewPartname());      
        }
                 
        subject.subscribe(response => {             
            this.product = response[0];
            this.accounts = response[1];
            this.vatTypes = response[2];
            
            this.setTabTitle();
            
            if (response.length > 3 && response[3] !== null) {                      
                this.product.PartName = response[3].PartNameSuggestion;
            }  
                                                        
            this.extendFormConfig();
            
            this.showHidePriceFields(this.product);          
        });       
    }
    
    private setTabTitle() {
        let tabTitle = this.product.PartName ? 'Produktnr. ' + this.product.PartName : 'Produkt (kladd)'; 
        this.tabService.addTab({ url: '/products/details/' + this.product.ID, name: tabTitle, active: true, moduleID: 6 });
    }
        
    private ready(event) {
        this.setupSubscriptions(null);        
    }
    
    private saveProduct(completeEvent) {                       
        
        if (this.productId > 0) { 
            this.productService.Put(this.product.ID, this.product)
                .subscribe(
                    (updatedValue) => {
                        completeEvent('Produkt lagret');                        
                        this.product = updatedValue;
                        this.setTabTitle();
                    },
                    (err) => {
                        completeEvent('Feil oppsto ved lagring');
                        console.log('Feil oppsto ved lagring', err);
                    } 
                );
        } else {
            this.productService.Post(this.product)
                .subscribe(
                    (newProduct) => {                        
                        console.log('Product created, redirect to new ID, ' + newProduct.ID);
                        this.router.navigateByUrl('/products/details/' + newProduct.ID);
                    },
                    (err) => {
                        completeEvent('Feil oppsto ved lagring');
                        console.log('Feil oppsto ved lagring', err);
                    }
                );
        }
    }
        
    private calculateAndUpdatePrice() {    
        this.productService.calculatePrice(this.product)            
            .subscribe((data) => {                
                this.product.PriceIncVat = data.PriceIncVat;
                this.product.PriceExVat = data.PriceExVat;
                
                this.product = _.cloneDeep(this.product);
            },
            (err) => console.log('Feil ved kalkulering av pris', err)
        );  
    }
    
    private showHidePriceFields(model: Product) {
        // show/hide price fields based on checkbox - this currenctly does not work, Jorge is working on a fix        
        this.priceIncVat.Hidden = !model.CalculateGrossPriceBasedOnNetPrice;
        this.priceExVat.Hidden = model.CalculateGrossPriceBasedOnNetPrice;  
        this.product = _.cloneDeep(this.product);          
    }
    
    private previousProduct() {
        this.productService.previous(this.product.ID)
            .subscribe((data) => {
                if (data) {
                    this.router.navigateByUrl('/products/details/' + data.ID);
                }
            });
    }
    
    private nextProduct() {
        this.productService.next(this.product.ID)
            .subscribe((data) => {
                if (data) {
                    this.router.navigateByUrl('/products/details/' + data.ID);
                }
            });
    }
    
    private addProduct() {
        this.router.navigateByUrl('/products/details/0');
    }
       
    private extendFormConfig() {
        
        let vattype: UniFieldLayout = this.fields.find(x => x.Property === 'VatTypeID');
        vattype.Options = {
            source: this.vatTypes,
            valueProperty: 'ID',
            displayProperty: 'VatCode',                        
            debounceTime: 100,            
            search: (searchValue: string) => Observable.from([this.vatTypes.filter((vt) => vt.VatCode === searchValue || vt.VatPercent.toString() === searchValue || vt.Name.toLowerCase().indexOf(searchValue.toLowerCase()) >= 0)]),
            template: (vt: VatType) => vt ? `${vt.VatCode}, ${vt.VatPercent}%, ${vt.Name}` : ''
        };
        
        let accountField: UniFieldLayout = this.fields.find(x => x.Property === 'AccountID');       
        accountField.Options = {
            source: this.accounts,
            displayProperty: 'AccountNumber',
            valueProperty: 'ID',
            debounceTime: 200,
            template: (account: Account) => account ? `${account.AccountNumber} ${account.AccountName }` : ''
        };
        
        let typeField: UniFieldLayout = this.fields.find(x => x.Property === 'Type');       
        typeField.Options = {
            displayProperty: 'TypeName',
            valueProperty: 'ID',     
            source: this.productTypes
        };
        
        this.priceExVat =  this.fields.find(x => x.Property === 'PriceExVat');
        this.priceIncVat = this.fields.find(x => x.Property === 'PriceIncVat');
        this.vatTypeField = this.fields.find(x => x.Property === 'VatTypeID');         
        this.calculateGrossPriceBasedOnNetPriceField = this.fields.find(x => x.Property === 'CalculateGrossPriceBasedOnNetPrice');       
    }
    
    private setupSubscriptions(event) {        
       
        this.form.field('VatTypeID') 
                .onChange              
                .subscribe((data) => {
                    // recalculate when vattype changes also
                    this.calculateAndUpdatePrice();                    
                });
                
        this.form.field('AccountID') 
                .onChange              
                .subscribe((data) => {
                    if (this.product.AccountID) {
                        // set vattypeid based on account
                        let account = this.accounts.find(x => x.ID === data.AccountID);
                        if (account !== null && account.VatTypeID !== null) {
                            this.product.VatTypeID = account.VatTypeID;
                            this.product = _.cloneDeep(this.product);  
                        }
                    }
                });

        this.form.field('PriceExVat')
            .onChange
            .subscribe((data) => {
                if (!this.product.CalculateGrossPriceBasedOnNetPrice) {
                    this.calculateAndUpdatePrice();
                }
            });

        this.form.field('PriceIncVat')
            .onChange            
            .subscribe((data) => {
                if (this.product.CalculateGrossPriceBasedOnNetPrice) {
                    this.calculateAndUpdatePrice();
                }
            });
            
        this.form.field('CalculateGrossPriceBasedOnNetPrice')
            .onChange            
            .subscribe((value) => {
                this.showHidePriceFields(value);
            });
    }
    
    // TODO: return ComponentLayout when the object respects the interface
    private getComponentLayout(): any {
        return {
            Name: 'Product',
            BaseEntity: 'Product',
            StatusCode: 0,
            Deleted: false,
            CreatedAt: null,
            UpdatedAt: null,
            CreatedBy: null,
            UpdatedBy: null,
            ID: 1,
            CustomFields: null,
            Fields: [
                {
                    ComponentLayoutID: 3,
                    EntityType: 'Product',
                    Property: 'PartName',
                    Placement: 1,
                    Hidden: false,
                    FieldType: 10,
                    ReadOnly: false, 
                    LookupField: false,
                    Label: 'Produktnr',
                    Description: '',
                    HelpText: '',
                    FieldSet: 0,
                    Section: 0,
                    Placeholder: null,
                    Options: null,
                    LineBreak: null,
                    Combo: null,
                    Legend: '',
                    StatusCode: 0,
                    ID: 1,
                    Deleted: false,
                    CreatedAt: null,
                    UpdatedAt: null,
                    CreatedBy: null,
                    UpdatedBy: null,
                    CustomFields: null 
                },
                {
                    ComponentLayoutID: 3,
                    EntityType: 'Product',
                    Property: 'Name',
                    Placement: 1,
                    Hidden: false,
                    FieldType: 10,
                    ReadOnly: false,
                    LookupField: false,
                    Label: 'Navn',
                    Description: '',
                    HelpText: '',
                    FieldSet: 0,
                    Section: 0,
                    Placeholder: null,
                    Options: null,
                    LineBreak: null,
                    Combo: null,
                    Legend: '',
                    StatusCode: 0,
                    ID: 2,
                    Deleted: false,
                    CreatedAt: null,
                    UpdatedAt: null,
                    CreatedBy: null,
                    UpdatedBy: null,
                    CustomFields: null                     
                },
                {
                    ComponentLayoutID: 3,
                    EntityType: 'Product',
                    Property: 'Type',
                    Placement: 1,
                    Hidden: false,
                    FieldType: 3,
                    ReadOnly: false,
                    LookupField: false,
                    Label: 'Produkttype',
                    Description: '',
                    HelpText: '',
                    FieldSet: 0,
                    Section: 0,
                    Placeholder: null,
                    Options: null,
                    LineBreak: null,
                    Combo: null,
                    Legend: '',
                    StatusCode: 0,
                    ID: 2,
                    Deleted: false,
                    CreatedAt: null,
                    UpdatedAt: null,
                    CreatedBy: null,
                    UpdatedBy: null,
                    CustomFields: null 
                },
                {
                    ComponentLayoutID: 3,
                    EntityType: 'Product',
                    Property: 'Unit',
                    Placement: 1,
                    Hidden: false,
                    FieldType: 10,
                    ReadOnly: false,
                    LookupField: false,
                    Label: 'Enhet',
                    Description: '',
                    HelpText: '',
                    FieldSet: 0,
                    Section: 0,
                    Placeholder: null,
                    Options: null,
                    LineBreak: null,
                    Combo: null,
                    Legend: '',
                    StatusCode: 0,
                    ID: 2,
                    Deleted: false,
                    CreatedAt: null,
                    UpdatedAt: null,
                    CreatedBy: null,
                    UpdatedBy: null,
                    CustomFields: null 
                },
                {
                    ComponentLayoutID: 3,
                    EntityType: 'Product',
                    Property: 'CostPrice',
                    Placement: 1,
                    Hidden: false,
                    FieldType: 10,
                    ReadOnly: false,
                    LookupField: false,
                    Label: 'Innpris eks. mva',
                    Description: '',
                    HelpText: '',
                    FieldSet: 0,
                    Section: 0,
                    Placeholder: null,
                    Options: null,
                    LineBreak: null,
                    Combo: null,
                    Legend: '',
                    StatusCode: 0,
                    ID: 2,
                    Deleted: false,
                    CreatedAt: null,
                    UpdatedAt: null,
                    CreatedBy: null,
                    UpdatedBy: null,
                    CustomFields: null 
                },
                {
                    ComponentLayoutID: 1,
                    EntityType: 'Product',
                    Property: 'AccountID',
                    Placement: 4,
                    Hidden: false,
                    FieldType: 0,
                    ReadOnly: false,
                    LookupField: false,
                    Label: 'Hovedbokskonto',
                    Description: '',
                    HelpText: '',
                    FieldSet: 0,
                    Section: 0,
                    Placeholder: null,
                    Options: null,
                    LineBreak: null,
                    Combo: null,
                    Legend: '',
                    StatusCode: 0,
                    ID: 5,
                    Deleted: false,
                    CreatedAt: null,
                    UpdatedAt: null,
                    CreatedBy: null,
                    UpdatedBy: null,
                    CustomFields: null 
                },
                {
                    ComponentLayoutID: 1,
                    EntityType: 'Product',
                    Property: 'VatTypeID',
                    Placement: 4,
                    Hidden: false,
                    FieldType: 0,
                    ReadOnly: false,
                    LookupField: false,
                    Label: 'Mvakode',
                    Description: '',
                    HelpText: '',
                    FieldSet: 0,
                    Section: 0,
                    Placeholder: null,
                    Options: null,
                    LineBreak: null,
                    Combo: null,
                    Legend: '',
                    StatusCode: 0,
                    ID: 4,
                    Deleted: false,
                    CreatedAt: null,
                    UpdatedAt: null,
                    CreatedBy: null,
                    UpdatedBy: null,
                    CustomFields: null 
                },
                {
                    ComponentLayoutID: 3,
                    EntityType: 'Product',
                    Property: 'CalculateGrossPriceBasedOnNetPrice',
                    Placement: 1,
                    Hidden: false,
                    FieldType: 5,
                    ReadOnly: false,
                    LookupField: false,
                    Label: 'Kalkuler utpris eks mva basert på utpris inkl. mva',
                    Description: '',
                    HelpText: '',
                    FieldSet: 0,
                    Section: 0,
                    Placeholder: null,
                    Options: null,
                    LineBreak: null,
                    Combo: null,
                    Legend: '',
                    StatusCode: 0,
                    ID: 2,
                    Deleted: false,
                    CreatedAt: null,
                    UpdatedAt: null,
                    CreatedBy: null,
                    UpdatedBy: null,
                    CustomFields: null 
                },
                {
                    ComponentLayoutID: 3,
                    EntityType: 'Product',
                    Property: 'PriceExVat',
                    Placement: 1,
                    Hidden: false,
                    FieldType: 10,
                    ReadOnly: false,
                    LookupField: false,
                    Label: 'Utpris eks. mva',
                    Description: '',
                    HelpText: '',
                    FieldSet: 0,
                    Section: 0,
                    Placeholder: null,
                    Options: null,
                    LineBreak: null,
                    Combo: null,
                    Legend: '',
                    StatusCode: 0,
                    ID: 2,
                    Deleted: false,
                    CreatedAt: null,
                    UpdatedAt: null,
                    CreatedBy: null,
                    UpdatedBy: null,
                    CustomFields: null 
                },
                {
                    ComponentLayoutID: 3,
                    EntityType: 'Product',
                    Property: 'PriceIncVat',
                    Placement: 1,
                    Hidden: false,
                    FieldType: 10,
                    ReadOnly: false,
                    LookupField: false,
                    Label: 'Utpris inkl. mva',
                    Description: '',
                    HelpText: '',
                    FieldSet: 0,
                    Section: 0,
                    Placeholder: null,
                    Options: null,
                    LineBreak: null,
                    Combo: null,
                    Legend: '',
                    StatusCode: 0,
                    ID: 2,
                    Deleted: false,
                    CreatedAt: null,
                    UpdatedAt: null,
                    CreatedBy: null,
                    UpdatedBy: null,
                    CustomFields: null 
                },                
                {
                    ComponentLayoutID: 3,
                    EntityType: 'Product',
                    Property: 'Description',
                    Placement: 4,
                    Hidden: false,
                    FieldType: 16,
                    ReadOnly: false,
                    LookupField: false,
                    Label: 'Beskrivelse',
                    Description: '',
                    HelpText: '',
                    FieldSet: 0,
                    Section: 1,
                    Sectionheader: 'Beskrivelse',
                    Placeholder: null,
                    Options: null,
                    LineBreak: null,
                    Combo: null,
                    Legend: 'Beskrivelse',
                    StatusCode: 0,
                    ID: 9,
                    Deleted: false,
                    CreatedAt: null,
                    UpdatedAt: null,
                    CreatedBy: null,
                    UpdatedBy: null,
                    CustomFields: null,
                    Classes: 'max-width'
                }                
            ]
        };
    }
}
