////
/// The UniGrid grid system.
/// (No relation to Massimo Vignelli.)
/// @group Felleskomponent
/// @author Jørgen Arnor Gårdsø Lom
////


// Configuration
// ============================================================================

/// The UniGrid has four breakpoints (in unitless pixels), with named size-classes
/// @type Map
$unigrid-sizes: ('small': 700, 'medium': 700, 'large': 1100, 'huge': 2000)

/// Here we set up how many columns each size class should have
/// @type Map
$unigrid-columns: ('huge': 16, 'large': 8, 'medium': 4, 'small': 1)

/// We also configure how large the gutters should be for each size class.
/// In our default configuration, this is constant at 1rem.
/// @type {Map}
$unigrid-gutters: ('small': 1rem, 'medium': 1rem, 'large': 1rem, 'huge': 1rem)


// Helper functions
// ============================================================================

/// Custom function that can return the column width for any given size class.
/// @param {String} $size - One of the enumerated size classes in $unigrid-sizes
/// @returns {Length}
@function unigrid-colWidth($size)
  @return 100% / map-get($unigrid-columns, #{$size})

/// Helper function that returns the average column count, based on the previous
/// count, and the current size class
/// @param {Number} $prev-columncount - The previous number of columns
/// @param {String} $size - The current size class
/// @returns {Number}
@function auto-column($prev-columncount, $size)
  $prev-size: map-get-prev($unigrid-columns, $size, false, key)
  @return round(($prev-columncount / map-get($unigrid-columns, $prev-size))*map-get($unigrid-columns, $size))


// Mixins
// ============================================================================

/// The UniGrid media query mixin. This is the mixin that the main UniGrid mixin
/// and the classes uses to generate the styles for each breakpoint.
/// @param {String} $sizeclass - Which size class should we target?
/// @param {Number} $columncount - How many columns should the element span?
/// @param {Bool} $flush - Include gutters (margin) in output?
/// @require {variable} $sizeclass
/// @require {variable} $column-count
/// @output A media query, using the media-mixin.
@mixin unigrid-query($sizeclass, $column-count, $flush:false)
  @include media($sizeclass)
    &
      @if $column-count
        @if $flush
          width: #{(unigrid-colWidth($sizeclass) * $column-count)}
        @else
          width: calc(#{(unigrid-colWidth($sizeclass) * $column-count)} - #{map-get($unigrid-gutters, $sizeclass) * 2})
          margin: auto map-get($unigrid-gutters, $sizeclass)
      @else
        display: none


/// The main UniGrid-mixin.
/// @param {Number} $huge-cols - How many columns should the element span on Huge displays?
/// @param {Number} $large-cols - How many columns should the element span on Large displays?
/// @param {Number} $medium-cols - How many columns should the element span on Medium displays?
/// @param {Number} $small-cols - How many columns should the element span on Small displays?
/// @param {Bool} $flush - Include gutters (margin) in output?
/// @require {variable} $huge-cols
/// @output Width (in percentages) and optional margin styles for all breakpoints in the grid system.
/// @example sass
///   @include unigrid(10, 3)
@mixin unigrid($huge-cols,$large-cols:auto-column($huge-cols,'large'),$medium-cols:auto-column($large-cols,'medium'),$small-cols:auto-column($medium-cols,'small'),$flush:false)
  &
    box-sizing: border-box
  $vars: $huge-cols, $large-cols, $medium-cols, $small-cols
  @for $i from 1 through length($vars)
    $column-count: false
    @if nth($vars, $i)==0
      $column-count: 1
    @else
      $column-count: nth($vars, $i)
    @for $size-index from 1 through length($unigrid-columns)
      $sizeclasses: map-keys($unigrid-columns)
      $sizeclass: nth($sizeclasses, $i)

      @include unigrid-query($sizeclass, $column-count, $flush)

/// Flush implementation of the UniGrid. Does not include margins.
/// Shorthand for the `unigrid`-mixin, with the $flush-variable set to true.
/// @param {Number} $huge-cols - How many columns should the element span on Huge displays?
/// @param {Number} $large-cols - How many columns should the element span on Large displays?
/// @param {Number} $medium-cols - How many columns should the element span on Medium displays?
/// @param {Number} $small-cols - How many columns should the element span on Small displays?
/// @require {variable} $huge-cols
/// @output Width (in percentages) all breakpoints in the grid system.
/// @example sass
///   @include unigrid-flush(10, 3)
@mixin unigrid-flush($huge-cols,$large-cols:auto-column($huge-cols,'large'),$medium-cols:auto-column($large-cols,'medium'),$small-cols:auto-column($medium-cols,'small'))
  @include unigrid($huge-cols, $large-cols, $medium-cols, $small-cols, true)


// Class name implementation
// ============================================================================

@each $sizeclass in map-keys($unigrid-columns)
  @for $col from 1 through map-get($unigrid-columns, $sizeclass)
    .unigrid-#{$sizeclass}-#{$col}
      @include unigrid-query($sizeclass, $col, false)

    .unigrid-flush-#{$sizeclass}-#{$col}
      @include unigrid-query($sizeclass, $col, true)

    .unigrid-#{$sizeclass}-false
      @include unigrid-query($sizeclass, false, false)

    .unigrid-flush-#{$sizeclass}-false
      @include unigrid-query($sizeclass, false, true)